{"version":3,"sources":["../src/state/useLocalStorage.ts","../src/state/useSessionStorage.ts","../src/state/useToggle.ts","../src/state/useCounter.ts","../src/state/createGlobalState.ts","../src/sensors/useMouse.ts","../src/sensors/useWindowSize.ts","../src/dom/useEventListener.ts","../src/dom/useClickOutside.ts","../src/browser/useDark.ts","../src/browser/useColorMode.ts","../src/browser/useClipboard.ts","../src/network/useFetch.ts","../src/animation/useInterval.ts","../src/animation/useTimeout.ts","../src/animation/useNow.ts","../src/utilities/useDebounce.ts","../src/utilities/useThrottle.ts"],"names":["DEFAULT_SERIALIZERS","useCallback","isClient","useState","useRef","useEffect","prev","globalState","touch","event","getSystemDark"],"mappings":"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","file":"index.cjs","sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { isClient, DEFAULT_SERIALIZERS } from '@reactuse/shared';\nimport type { Serializer, StorageOptions } from '@reactuse/shared';\n\nexport interface UseLocalStorageOptions<T> extends Omit<StorageOptions<T>, 'listenToStorageChanges'> {\n  /**\n   * 监听存储变化\n   * @default true\n   */\n  syncAcrossTabs?: boolean;\n}\n\n/**\n * 响应式 localStorage hook\n * \n * @param key - 存储键名\n * @param defaultValue - 默认值\n * @param options - 配置选项\n * @returns [value, setValue, removeValue]\n */\nexport function useLocalStorage<T = string>(\n  key: string,\n  defaultValue: T,\n  options: UseLocalStorageOptions<T> = {}\n): [T, (value: T | ((prev: T) => T)) => void, () => void] {\n  const {\n    serializer = DEFAULT_SERIALIZERS.any as Serializer<T>,\n    syncAcrossTabs = true,\n    onError = console.error,\n  } = options;\n\n  // 获取初始值\n  const getStoredValue = useCallback((): T => {\n    if (!isClient) return defaultValue;\n    \n    try {\n      const item = localStorage.getItem(key);\n      if (item === null) return defaultValue;\n      return serializer.read(item);\n    } catch (error) {\n      onError(error);\n      return defaultValue;\n    }\n  }, [key, defaultValue, serializer, onError]);\n\n  const [storedValue, setStoredValue] = useState<T>(getStoredValue);\n  const isUpdatingRef = useRef(false);\n\n  // 设置值到 localStorage\n  const setValue = useCallback((value: T | ((prev: T) => T)) => {\n    if (!isClient) return;\n    \n    try {\n      isUpdatingRef.current = true;\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      \n      if (valueToStore === undefined) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, serializer.write(valueToStore));\n      }\n    } catch (error) {\n      onError(error);\n    } finally {\n      isUpdatingRef.current = false;\n    }\n  }, [key, storedValue, serializer, onError]);\n\n  // 移除值\n  const removeValue = useCallback(() => {\n    if (!isClient) return;\n    \n    try {\n      isUpdatingRef.current = true;\n      localStorage.removeItem(key);\n      setStoredValue(defaultValue);\n    } catch (error) {\n      onError(error);\n    } finally {\n      isUpdatingRef.current = false;\n    }\n  }, [key, defaultValue, onError]);\n\n  // 监听存储变化\n  useEffect(() => {\n    if (!isClient || !syncAcrossTabs) return;\n\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.storageArea === localStorage && !isUpdatingRef.current) {\n        try {\n          if (e.newValue === null) {\n            setStoredValue(defaultValue);\n          } else {\n            setStoredValue(serializer.read(e.newValue));\n          }\n        } catch (error) {\n          onError(error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key, defaultValue, serializer, syncAcrossTabs, onError]);\n\n  // 初始化时同步值\n  useEffect(() => {\n    const currentValue = getStoredValue();\n    if (currentValue !== storedValue) {\n      setStoredValue(currentValue);\n    }\n  }, [getStoredValue, storedValue]);\n\n  return [storedValue, setValue, removeValue];\n}\n\n// 类型化的便捷函数\nexport function useLocalStorageString(\n  key: string,\n  defaultValue: string = '',\n  options?: Omit<UseLocalStorageOptions<string>, 'serializer'>\n) {\n  return useLocalStorage(key, defaultValue, {\n    ...options,\n    serializer: DEFAULT_SERIALIZERS.string,\n  });\n}\n\nexport function useLocalStorageNumber(\n  key: string,\n  defaultValue: number = 0,\n  options?: Omit<UseLocalStorageOptions<number>, 'serializer'>\n) {\n  return useLocalStorage(key, defaultValue, {\n    ...options,\n    serializer: {\n      read: (v: string) => {\n        const num = Number(v);\n        return Number.isNaN(num) ? defaultValue : num;\n      },\n      write: (v: number) => String(v),\n    },\n  });\n}\n\nexport function useLocalStorageBoolean(\n  key: string,\n  defaultValue: boolean = false,\n  options?: Omit<UseLocalStorageOptions<boolean>, 'serializer'>\n) {\n  return useLocalStorage(key, defaultValue, {\n    ...options,\n    serializer: DEFAULT_SERIALIZERS.boolean,\n  });\n}\n\nexport function useLocalStorageObject<T extends Record<string, any>>(\n  key: string,\n  defaultValue: T,\n  options?: Omit<UseLocalStorageOptions<T>, 'serializer'>\n) {\n  return useLocalStorage(key, defaultValue, {\n    ...options,\n    serializer: DEFAULT_SERIALIZERS.object,\n  });\n}","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { isClient, DEFAULT_SERIALIZERS } from '@reactuse/shared';\nimport type { Serializer, StorageOptions } from '@reactuse/shared';\n\nexport interface UseSessionStorageOptions<T> extends Omit<StorageOptions<T>, 'listenToStorageChanges'> {\n  /**\n   * 监听存储变化\n   * @default true\n   */\n  syncAcrossTabs?: boolean;\n}\n\n/**\n * 响应式 sessionStorage hook\n * \n * @param key - 存储键名\n * @param defaultValue - 默认值\n * @param options - 配置选项\n * @returns [value, setValue, removeValue]\n */\nexport function useSessionStorage<T = string>(\n  key: string,\n  defaultValue: T,\n  options: UseSessionStorageOptions<T> = {}\n): [T, (value: T | ((prev: T) => T)) => void, () => void] {\n  const {\n    serializer = DEFAULT_SERIALIZERS.any as Serializer<T>,\n    syncAcrossTabs = true,\n    onError = console.error,\n  } = options;\n\n  // 获取初始值\n  const getStoredValue = useCallback((): T => {\n    if (!isClient) return defaultValue;\n    \n    try {\n      const item = sessionStorage.getItem(key);\n      if (item === null) return defaultValue;\n      return serializer.read(item);\n    } catch (error) {\n      onError(error);\n      return defaultValue;\n    }\n  }, [key, defaultValue, serializer, onError]);\n\n  const [storedValue, setStoredValue] = useState<T>(getStoredValue);\n  const isUpdatingRef = useRef(false);\n\n  // 设置值到 sessionStorage\n  const setValue = useCallback((value: T | ((prev: T) => T)) => {\n    if (!isClient) return;\n    \n    try {\n      isUpdatingRef.current = true;\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      \n      if (valueToStore === undefined) {\n        sessionStorage.removeItem(key);\n      } else {\n        sessionStorage.setItem(key, serializer.write(valueToStore));\n      }\n    } catch (error) {\n      onError(error);\n    } finally {\n      isUpdatingRef.current = false;\n    }\n  }, [key, storedValue, serializer, onError]);\n\n  // 移除值\n  const removeValue = useCallback(() => {\n    if (!isClient) return;\n    \n    try {\n      isUpdatingRef.current = true;\n      sessionStorage.removeItem(key);\n      setStoredValue(defaultValue);\n    } catch (error) {\n      onError(error);\n    } finally {\n      isUpdatingRef.current = false;\n    }\n  }, [key, defaultValue, onError]);\n\n  // 监听存储变化\n  useEffect(() => {\n    if (!isClient || !syncAcrossTabs) return;\n\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.storageArea === sessionStorage && !isUpdatingRef.current) {\n        try {\n          if (e.newValue === null) {\n            setStoredValue(defaultValue);\n          } else {\n            setStoredValue(serializer.read(e.newValue));\n          }\n        } catch (error) {\n          onError(error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key, defaultValue, serializer, syncAcrossTabs, onError]);\n\n  // 初始化时同步值\n  useEffect(() => {\n    const currentValue = getStoredValue();\n    if (currentValue !== storedValue) {\n      setStoredValue(currentValue);\n    }\n  }, [getStoredValue, storedValue]);\n\n  return [storedValue, setValue, removeValue];\n}\n\n// 类型化的便捷函数\nexport function useSessionStorageString(\n  key: string,\n  defaultValue: string = '',\n  options?: Omit<UseSessionStorageOptions<string>, 'serializer'>\n) {\n  return useSessionStorage(key, defaultValue, {\n    ...options,\n    serializer: DEFAULT_SERIALIZERS.string,\n  });\n}\n\nexport function useSessionStorageNumber(\n  key: string,\n  defaultValue: number = 0,\n  options?: Omit<UseSessionStorageOptions<number>, 'serializer'>\n) {\n  return useSessionStorage(key, defaultValue, {\n    ...options,\n    serializer: {\n      read: (v: string) => {\n        const num = Number(v);\n        return Number.isNaN(num) ? defaultValue : num;\n      },\n      write: (v: number) => String(v),\n    },\n  });\n}\n\nexport function useSessionStorageBoolean(\n  key: string,\n  defaultValue: boolean = false,\n  options?: Omit<UseSessionStorageOptions<boolean>, 'serializer'>\n) {\n  return useSessionStorage(key, defaultValue, {\n    ...options,\n    serializer: DEFAULT_SERIALIZERS.boolean,\n  });\n}\n\nexport function useSessionStorageObject<T extends Record<string, any>>(\n  key: string,\n  defaultValue: T,\n  options?: Omit<UseSessionStorageOptions<T>, 'serializer'>\n) {\n  return useSessionStorage(key, defaultValue, {\n    ...options,\n    serializer: DEFAULT_SERIALIZERS.object,\n  });\n}","import { useState, useCallback } from 'react';\n\nexport interface UseToggleReturn {\n  /** 当前状态值 */\n  value: boolean;\n  /** 切换状态 */\n  toggle: () => void;\n  /** 设置为 true */\n  setTrue: () => void;\n  /** 设置为 false */\n  setFalse: () => void;\n  /** 设置状态值 */\n  setValue: (value: boolean | ((prev: boolean) => boolean)) => void;\n}\n\n/**\n * 响应式布尔值切换 hook\n * \n * @param initialValue - 初始值，默认为 false\n * @returns 包含状态值和操作方法的对象\n */\nexport function useToggle(initialValue: boolean = false): UseToggleReturn {\n  const [value, setValue] = useState<boolean>(initialValue);\n\n  const toggle = useCallback(() => {\n    setValue(prev => !prev);\n  }, []);\n\n  const setTrue = useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = useCallback(() => {\n    setValue(false);\n  }, []);\n\n  const setValueCallback = useCallback((newValue: boolean | ((prev: boolean) => boolean)) => {\n    setValue(newValue);\n  }, []);\n\n  return {\n    value,\n    toggle,\n    setTrue,\n    setFalse,\n    setValue: setValueCallback,\n  };\n}\n\n/**\n * 带有多个值的切换 hook\n * \n * @param values - 可切换的值数组\n * @param initialIndex - 初始索引，默认为 0\n * @returns 包含当前值、索引和切换方法的对象\n */\nexport function useToggleValues<T>(\n  values: readonly T[],\n  initialIndex: number = 0\n): {\n  value: T;\n  index: number;\n  next: () => void;\n  prev: () => void;\n  set: (index: number) => void;\n  setValue: (value: T) => void;\n} {\n  const [index, setIndex] = useState<number>(\n    Math.max(0, Math.min(initialIndex, values.length - 1))\n  );\n\n  const next = useCallback(() => {\n    setIndex(prev => (prev + 1) % values.length);\n  }, [values.length]);\n\n  const prev = useCallback(() => {\n    setIndex(prev => (prev - 1 + values.length) % values.length);\n  }, [values.length]);\n\n  const set = useCallback((newIndex: number) => {\n    if (newIndex >= 0 && newIndex < values.length) {\n      setIndex(newIndex);\n    }\n  }, [values.length]);\n\n  const setValue = useCallback((value: T) => {\n    const newIndex = values.indexOf(value);\n    if (newIndex !== -1) {\n      setIndex(newIndex);\n    }\n  }, [values]);\n\n  return {\n    value: values[index]!,\n    index,\n    next,\n    prev,\n    set,\n    setValue,\n  };\n}","import { useState, useCallback } from 'react';\n\nexport interface UseCounterOptions {\n  /** 最小值 */\n  min?: number;\n  /** 最大值 */\n  max?: number;\n  /** 步长，默认为 1 */\n  step?: number;\n}\n\nexport interface UseCounterReturn {\n  /** 当前计数值 */\n  count: number;\n  /** 增加计数 */\n  inc: (delta?: number) => void;\n  /** 减少计数 */\n  dec: (delta?: number) => void;\n  /** 设置计数值 */\n  set: (value: number | ((prev: number) => number)) => void;\n  /** 重置到初始值 */\n  reset: () => void;\n  /** 设置到最小值 */\n  setMin: () => void;\n  /** 设置到最大值 */\n  setMax: () => void;\n}\n\n/**\n * 响应式计数器 hook\n * \n * @param initialValue - 初始值，默认为 0\n * @param options - 配置选项\n * @returns 包含计数值和操作方法的对象\n */\nexport function useCounter(\n  initialValue: number = 0,\n  options: UseCounterOptions = {}\n): UseCounterReturn {\n  const { min, max, step = 1 } = options;\n  \n  // 确保初始值在范围内\n  const getValidValue = useCallback((value: number): number => {\n    let validValue = value;\n    if (min !== undefined && validValue < min) validValue = min;\n    if (max !== undefined && validValue > max) validValue = max;\n    return validValue;\n  }, [min, max]);\n\n  const [count, setCount] = useState<number>(() => getValidValue(initialValue));\n\n  const set = useCallback((value: number | ((prev: number) => number)) => {\n    setCount(prev => {\n      const newValue = typeof value === 'function' ? value(prev) : value;\n      return getValidValue(newValue);\n    });\n  }, [getValidValue]);\n\n  const inc = useCallback((delta: number = step) => {\n    set(prev => prev + delta);\n  }, [set, step]);\n\n  const dec = useCallback((delta: number = step) => {\n    set(prev => prev - delta);\n  }, [set, step]);\n\n  const reset = useCallback(() => {\n    set(initialValue);\n  }, [set, initialValue]);\n\n  const setMin = useCallback(() => {\n    if (min !== undefined) {\n      set(min);\n    }\n  }, [set, min]);\n\n  const setMax = useCallback(() => {\n    if (max !== undefined) {\n      set(max);\n    }\n  }, [set, max]);\n\n  return {\n    count,\n    inc,\n    dec,\n    set,\n    reset,\n    setMin,\n    setMax,\n  };\n}","import { useState, useEffect, useCallback } from 'react'\n\ntype Listener<T> = (value: T) => void\ntype Setter<T> = (value: T | ((prev: T) => T)) => void\n\ninterface GlobalState<T> {\n  listeners: Set<Listener<T>>\n  value: T\n}\n\nconst globalStates = new Map<string | symbol, GlobalState<any>>()\n\n/**\n * 创建全局状态，可在多个组件间共享\n * \n * @param key - 全局状态的唯一标识符\n * @param initialValue - 初始值\n * @returns 返回一个 hook 函数，用于在组件中使用该全局状态\n * \n * @example\n * ```tsx\n * // 创建全局状态\n * const useGlobalCounter = createGlobalState('counter', 0)\n * \n * // 在组件中使用\n * function ComponentA() {\n *   const [count, setCount] = useGlobalCounter()\n *   return (\n *     <div>\n *       <p>Count: {count}</p>\n *       <button onClick={() => setCount(count + 1)}>Increment</button>\n *     </div>\n *   )\n * }\n * \n * function ComponentB() {\n *   const [count, setCount] = useGlobalCounter()\n *   return (\n *     <div>\n *       <p>Count in B: {count}</p>\n *       <button onClick={() => setCount(count - 1)}>Decrement</button>\n *     </div>\n *   )\n * }\n * ```\n */\nexport function createGlobalState<T>(\n  key: string | symbol,\n  initialValue: T\n): () => [T, Setter<T>] {\n  // 初始化全局状态\n  if (!globalStates.has(key)) {\n    globalStates.set(key, {\n      listeners: new Set(),\n      value: initialValue,\n    })\n  }\n\n  return function useGlobalState(): [T, Setter<T>] {\n    const globalState = globalStates.get(key)!\n    const [localValue, setLocalValue] = useState<T>(globalState.value)\n\n    // 监听全局状态变化\n    useEffect(() => {\n      const listener: Listener<T> = (newValue: T) => {\n        setLocalValue(newValue)\n      }\n\n      globalState.listeners.add(listener)\n\n      // 确保本地状态与全局状态同步\n      if (localValue !== globalState.value) {\n        setLocalValue(globalState.value)\n      }\n\n      return () => {\n        globalState.listeners.delete(listener)\n      }\n    }, [])\n\n    // 设置全局状态\n    const setGlobalValue = useCallback<Setter<T>>((newValue) => {\n      const globalState = globalStates.get(key)!\n      const nextValue = typeof newValue === 'function' \n        ? (newValue as (prev: T) => T)(globalState.value)\n        : newValue\n\n      globalState.value = nextValue\n\n      // 通知所有监听器\n      globalState.listeners.forEach(listener => {\n        listener(nextValue)\n      })\n    }, [])\n\n    return [localValue, setGlobalValue]\n  }\n}\n\n/**\n * 获取全局状态的当前值（不订阅变化）\n * \n * @param key - 全局状态的唯一标识符\n * @returns 当前值，如果状态不存在则返回 undefined\n */\nexport function getGlobalState<T>(key: string | symbol): T | undefined {\n  const globalState = globalStates.get(key)\n  return globalState?.value\n}\n\n/**\n * 设置全局状态的值（不需要在组件中使用）\n * \n * @param key - 全局状态的唯一标识符\n * @param value - 新值或更新函数\n */\nexport function setGlobalState<T>(\n  key: string | symbol,\n  value: T | ((prev: T) => T)\n): void {\n  const globalState = globalStates.get(key)\n  if (!globalState) {\n    console.warn(`Global state with key \"${String(key)}\" does not exist`)\n    return\n  }\n\n  const nextValue = typeof value === 'function'\n    ? (value as (prev: T) => T)(globalState.value)\n    : value\n\n  globalState.value = nextValue\n\n  // 通知所有监听器\n  globalState.listeners.forEach(listener => {\n    listener(nextValue)\n  })\n}\n\n/**\n * 重置全局状态到初始值\n * \n * @param key - 全局状态的唯一标识符\n * @param initialValue - 初始值\n */\nexport function resetGlobalState<T>(\n  key: string | symbol,\n  initialValue: T\n): void {\n  const globalState = globalStates.get(key)\n  if (!globalState) {\n    console.warn(`Global state with key \"${String(key)}\" does not exist`)\n    return\n  }\n\n  globalState.value = initialValue\n\n  // 通知所有监听器\n  globalState.listeners.forEach(listener => {\n    listener(initialValue)\n  })\n}\n\n/**\n * 销毁全局状态\n * \n * @param key - 全局状态的唯一标识符\n */\nexport function destroyGlobalState(key: string | symbol): void {\n  globalStates.delete(key)\n}","import { useState, useEffect, useRef } from 'react';\nimport { isClient } from '@reactuse/shared';\nimport type { Position } from '@reactuse/shared';\n\nexport interface UseMouseOptions {\n  /**\n   * 鼠标位置的初始值\n   * @default { x: 0, y: 0 }\n   */\n  initialValue?: Position;\n  /**\n   * 监听目标元素，默认为 window\n   * @default window\n   */\n  target?: Element | Window | null;\n  /**\n   * 监听 touch 事件\n   * @default true\n   */\n  touch?: boolean;\n  /**\n   * 重置鼠标位置到初始值当鼠标离开目标元素\n   * @default false\n   */\n  resetOnTouchEnds?: boolean;\n  /**\n   * 初始值的鼠标位置类型\n   * @default 'page'\n   */\n  type?: 'page' | 'client' | 'screen';\n}\n\nexport interface UseMouseReturn {\n  /** 鼠标 X 坐标 */\n  x: number;\n  /** 鼠标 Y 坐标 */\n  y: number;\n  /** 源事件 */\n  sourceType: 'mouse' | 'touch' | null;\n}\n\n/**\n * 响应式鼠标位置\n * \n * @param options - 配置选项\n * @returns 鼠标位置信息\n */\nexport function useMouse(options: UseMouseOptions = {}): UseMouseReturn {\n  const {\n    initialValue = { x: 0, y: 0 },\n    target,\n    touch = true,\n    resetOnTouchEnds = false,\n    type = 'page',\n  } = options;\n\n  const [position, setPosition] = useState<Position>(initialValue);\n  const [sourceType, setSourceType] = useState<'mouse' | 'touch' | null>(null);\n  const targetRef = useRef<Element | Window | null>(target || (isClient ? window : null));\n\n  useEffect(() => {\n    if (!isClient) return;\n\n    const element = targetRef.current || window;\n\n    const getPosition = (event: MouseEvent | TouchEvent): Position => {\n      if ('touches' in event) {\n        const touch = event.touches[0];\n        if (!touch) return initialValue;\n        \n        switch (type) {\n          case 'screen':\n            return { x: touch.screenX, y: touch.screenY };\n          case 'client':\n            return { x: touch.clientX, y: touch.clientY };\n          case 'page':\n          default:\n            return { x: touch.pageX, y: touch.pageY };\n        }\n      } else {\n        switch (type) {\n          case 'screen':\n            return { x: event.screenX, y: event.screenY };\n          case 'client':\n            return { x: event.clientX, y: event.clientY };\n          case 'page':\n          default:\n            return { x: event.pageX, y: event.pageY };\n        }\n      }\n    };\n\n    const handleMouseMove = (event: Event) => {\n      setPosition(getPosition(event as MouseEvent));\n      setSourceType('mouse');\n    };\n\n    const handleTouchMove = (event: Event) => {\n      const touchEvent = event as TouchEvent;\n      if (touchEvent.touches.length > 0) {\n        setPosition(getPosition(touchEvent));\n        setSourceType('touch');\n      }\n    };\n\n    const handleTouchEnd = () => {\n      if (resetOnTouchEnds) {\n        setPosition(initialValue);\n        setSourceType(null);\n      }\n    };\n\n    // 添加鼠标事件监听\n    element.addEventListener('mousemove', handleMouseMove as EventListener, { passive: true });\n    \n    // 添加触摸事件监听\n    if (touch) {\n      element.addEventListener('touchmove', handleTouchMove as EventListener, { passive: true });\n      if (resetOnTouchEnds) {\n        element.addEventListener('touchend', handleTouchEnd, { passive: true });\n      }\n    }\n\n    return () => {\n      element.removeEventListener('mousemove', handleMouseMove as EventListener);\n      if (touch) {\n        element.removeEventListener('touchmove', handleTouchMove as EventListener);\n        if (resetOnTouchEnds) {\n          element.removeEventListener('touchend', handleTouchEnd);\n        }\n      }\n    };\n  }, [initialValue, touch, resetOnTouchEnds, type]);\n\n  // 更新 target ref\n  useEffect(() => {\n    targetRef.current = target || (isClient ? window : null);\n  }, [target]);\n\n  return {\n    x: position.x,\n    y: position.y,\n    sourceType,\n  };\n}\n\n/**\n * 响应式鼠标在元素内的位置\n * \n * @param target - 目标元素\n * @param options - 配置选项\n * @returns 鼠标在元素内的位置信息\n */\nexport function useMouseInElement(\n  target: Element | null,\n  options: Omit<UseMouseOptions, 'target'> = {}\n): UseMouseReturn & {\n  /** 鼠标相对于元素的 X 坐标 */\n  elementX: number;\n  /** 鼠标相对于元素的 Y 坐标 */\n  elementY: number;\n  /** 鼠标相对于元素的 X 坐标（百分比） */\n  elementPositionX: number;\n  /** 鼠标相对于元素的 Y 坐标（百分比） */\n  elementPositionY: number;\n  /** 鼠标是否在元素内 */\n  isOutside: boolean;\n} {\n  const mouse = useMouse({ ...options, target: target || null });\n  const [elementPosition, setElementPosition] = useState({\n    elementX: 0,\n    elementY: 0,\n    elementPositionX: 0,\n    elementPositionY: 0,\n    isOutside: true,\n  });\n\n  useEffect(() => {\n    if (!target || !isClient) return;\n\n    const updateElementPosition = () => {\n      const rect = target.getBoundingClientRect();\n      const elementX = mouse.x - rect.left - window.pageXOffset;\n      const elementY = mouse.y - rect.top - window.pageYOffset;\n      const elementPositionX = elementX / rect.width;\n      const elementPositionY = elementY / rect.height;\n      const isOutside = elementX < 0 || elementY < 0 || elementX > rect.width || elementY > rect.height;\n\n      setElementPosition({\n        elementX,\n        elementY,\n        elementPositionX,\n        elementPositionY,\n        isOutside,\n      });\n    };\n\n    updateElementPosition();\n  }, [mouse.x, mouse.y, target]);\n\n  return {\n    ...mouse,\n    ...elementPosition,\n  };\n}","import { useState, useEffect } from 'react';\nimport { isClient } from '@reactuse/shared';\nimport type { Size } from '@reactuse/shared';\n\nexport interface UseWindowSizeOptions {\n  /**\n   * 窗口大小的初始值\n   * @default { width: Infinity, height: Infinity }\n   */\n  initialWidth?: number;\n  initialHeight?: number;\n  /**\n   * 监听 orientationchange 事件\n   * @default true\n   */\n  listenOrientation?: boolean;\n  /**\n   * 是否包含滚动条\n   * @default true\n   */\n  includeScrollbar?: boolean;\n}\n\nexport interface UseWindowSizeReturn {\n  /** 窗口宽度 */\n  width: number;\n  /** 窗口高度 */\n  height: number;\n}\n\n/**\n * 响应式窗口大小\n * \n * @param options - 配置选项\n * @returns 窗口大小信息\n */\nexport function useWindowSize(options: UseWindowSizeOptions = {}): UseWindowSizeReturn {\n  const {\n    initialWidth = Infinity,\n    initialHeight = Infinity,\n    listenOrientation = true,\n    includeScrollbar = true,\n  } = options;\n\n  const [windowSize, setWindowSize] = useState<Size>(() => {\n    if (!isClient) {\n      return { width: initialWidth, height: initialHeight };\n    }\n    \n    return {\n      width: includeScrollbar ? window.innerWidth : document.documentElement.clientWidth,\n      height: includeScrollbar ? window.innerHeight : document.documentElement.clientHeight,\n    };\n  });\n\n  useEffect(() => {\n    if (!isClient) return;\n\n    const updateSize = () => {\n      setWindowSize({\n        width: includeScrollbar ? window.innerWidth : document.documentElement.clientWidth,\n        height: includeScrollbar ? window.innerHeight : document.documentElement.clientHeight,\n      });\n    };\n\n    // 监听窗口大小变化\n    window.addEventListener('resize', updateSize, { passive: true });\n    \n    // 监听设备方向变化\n    if (listenOrientation) {\n      window.addEventListener('orientationchange', updateSize, { passive: true });\n    }\n\n    // 初始化时更新一次\n    updateSize();\n\n    return () => {\n      window.removeEventListener('resize', updateSize);\n      if (listenOrientation) {\n        window.removeEventListener('orientationchange', updateSize);\n      }\n    };\n  }, [includeScrollbar, listenOrientation]);\n\n  return windowSize;\n}","import { useEffect, useRef } from 'react';\nimport { isClient } from '@reactuse/shared';\n\nexport interface UseEventListenerOptions {\n  /**\n   * 事件监听器选项\n   */\n  capture?: boolean;\n  once?: boolean;\n  passive?: boolean;\n  signal?: AbortSignal;\n}\n\n/**\n * 轻松使用 EventListener\n * \n * @param event - 事件名称\n * @param listener - 事件监听器\n * @param target - 目标元素，默认为 window\n * @param options - 事件监听器选项\n */\nexport function useEventListener<K extends keyof WindowEventMap>(\n  event: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  target?: Window | null,\n  options?: UseEventListenerOptions\n): void;\n\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K,\n  listener: (this: Document, ev: DocumentEventMap[K]) => any,\n  target: Document,\n  options?: UseEventListenerOptions\n): void;\n\nexport function useEventListener<K extends keyof HTMLElementEventMap>(\n  event: K,\n  listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  target: HTMLElement | null,\n  options?: UseEventListenerOptions\n): void;\n\nexport function useEventListener(\n  event: string,\n  listener: EventListener,\n  target: EventTarget | null | undefined,\n  options?: UseEventListenerOptions\n): void;\n\nexport function useEventListener(\n  event: string,\n  listener: EventListener,\n  target: EventTarget | null | undefined = isClient ? window : null,\n  options: UseEventListenerOptions = {}\n): void {\n  const listenerRef = useRef(listener);\n  const targetRef = useRef(target);\n  const optionsRef = useRef(options);\n\n  // 更新 refs\n  listenerRef.current = listener;\n  targetRef.current = target;\n  optionsRef.current = options;\n\n  useEffect(() => {\n    if (!isClient) return;\n    \n    const element = targetRef.current;\n    if (!element) return;\n\n    const eventListener: EventListener = (event) => {\n      listenerRef.current(event);\n    };\n\n    const eventOptions: AddEventListenerOptions = {};\n    if (optionsRef.current.capture !== undefined) eventOptions.capture = optionsRef.current.capture;\n    if (optionsRef.current.once !== undefined) eventOptions.once = optionsRef.current.once;\n    if (optionsRef.current.passive !== undefined) eventOptions.passive = optionsRef.current.passive;\n    if (optionsRef.current.signal !== undefined) eventOptions.signal = optionsRef.current.signal;\n\n    element.addEventListener(event, eventListener, eventOptions);\n\n    return () => {\n      element.removeEventListener(event, eventListener, eventOptions);\n    };\n  }, [event]);\n}\n\n/**\n * 监听多个事件\n * \n * @param events - 事件名称数组\n * @param listener - 事件监听器\n * @param target - 目标元素\n * @param options - 事件监听器选项\n */\nexport function useEventListeners(\n  events: string[],\n  listener: EventListener,\n  target: EventTarget | null | undefined = isClient ? window : null,\n  options: UseEventListenerOptions = {}\n): void {\n  const listenerRef = useRef(listener);\n  const targetRef = useRef(target);\n  const optionsRef = useRef(options);\n\n  // 更新 refs\n  listenerRef.current = listener;\n  targetRef.current = target;\n  optionsRef.current = options;\n\n  useEffect(() => {\n    if (!isClient) return;\n    \n    const element = targetRef.current;\n    if (!element) return;\n\n    const eventListener: EventListener = (event) => {\n      listenerRef.current(event);\n    };\n\n    const eventOptions: AddEventListenerOptions = {};\n    if (optionsRef.current.capture !== undefined) eventOptions.capture = optionsRef.current.capture;\n    if (optionsRef.current.once !== undefined) eventOptions.once = optionsRef.current.once;\n    if (optionsRef.current.passive !== undefined) eventOptions.passive = optionsRef.current.passive;\n    if (optionsRef.current.signal !== undefined) eventOptions.signal = optionsRef.current.signal;\n\n    events.forEach(event => {\n      element.addEventListener(event, eventListener, eventOptions);\n    });\n\n    return () => {\n      events.forEach(event => {\n        element.removeEventListener(event, eventListener, eventOptions);\n      });\n    };\n  }, [events]);\n}","import { useRef, useCallback } from 'react';\nimport { useEventListener } from './useEventListener';\nimport type { ElementTarget } from '@reactuse/shared';\n\nexport interface UseClickOutsideOptions {\n  /**\n   * 监听的事件类型\n   * @default ['mousedown', 'touchstart']\n   */\n  events?: string[];\n  /**\n   * 检测点击是否在目标元素外部的自定义函数\n   */\n  detect?: (event: Event, target: Element) => boolean;\n  /**\n   * 忽略的元素列表\n   */\n  ignore?: (ElementTarget | string)[];\n}\n\n/**\n * 监听元素外部的点击\n * \n * @param target - 目标元素\n * @param handler - 点击外部时的回调函数\n * @param options - 配置选项\n */\nexport function useClickOutside(\n  target: ElementTarget,\n  handler: (event: Event) => void,\n  options: UseClickOutsideOptions = {}\n): void {\n  const {\n    events = ['mousedown', 'touchstart'],\n    detect = defaultDetect,\n    ignore = [],\n  } = options;\n\n  const handlerRef = useRef(handler);\n  const targetRef = useRef(target);\n  const ignoreRef = useRef(ignore);\n\n  // 更新 refs\n  handlerRef.current = handler;\n  targetRef.current = target;\n  ignoreRef.current = ignore;\n\n  const listener = useCallback((event: Event) => {\n    const targetElement = getTargetElement(targetRef.current);\n    if (!targetElement) return;\n\n    // 检查是否点击在目标元素内部\n    if (!detect(event, targetElement)) return;\n\n    // 检查是否点击在忽略的元素内部\n    const ignoreElements = ignoreRef.current\n      .map(item => getTargetElement(item))\n      .filter(Boolean) as Element[];\n\n    if (ignoreElements.some(element => element.contains(event.target as Node))) {\n      return;\n    }\n\n    handlerRef.current(event);\n  }, [detect]);\n\n  // 监听指定的事件\n  events.forEach(eventName => {\n    useEventListener(eventName, listener, document, { passive: true });\n  });\n}\n\n/**\n * 默认的检测函数\n */\nfunction defaultDetect(event: Event, target: Element): boolean {\n  return !target.contains(event.target as Node);\n}\n\n/**\n * 获取目标元素\n */\nfunction getTargetElement(target: ElementTarget | string): Element | null {\n  if (typeof target === 'string') {\n    return document.querySelector(target);\n  }\n  \n  if (target && 'current' in target) {\n    return target.current as Element | null;\n  }\n  \n  if (target instanceof Element) {\n    return target;\n  }\n  \n  return null;\n}\n\n/**\n * 监听多个元素外部的点击\n * \n * @param targets - 目标元素数组\n * @param handler - 点击外部时的回调函数\n * @param options - 配置选项\n */\nexport function useClickOutsideMultiple(\n  targets: ElementTarget[],\n  handler: (event: Event) => void,\n  options: UseClickOutsideOptions = {}\n): void {\n  const {\n    events = ['mousedown', 'touchstart'],\n    detect = defaultDetect,\n    ignore = [],\n  } = options;\n\n  const handlerRef = useRef(handler);\n  const targetsRef = useRef(targets);\n  const ignoreRef = useRef(ignore);\n\n  // 更新 refs\n  handlerRef.current = handler;\n  targetsRef.current = targets;\n  ignoreRef.current = ignore;\n\n  const listener = useCallback((event: Event) => {\n    const targetElements = targetsRef.current\n      .map(target => getTargetElement(target))\n      .filter(Boolean) as Element[];\n\n    if (targetElements.length === 0) return;\n\n    // 检查是否点击在任何目标元素内部\n    const isInsideAnyTarget = targetElements.some(element => {\n      return !detect(event, element);\n    });\n\n    if (isInsideAnyTarget) return;\n\n    // 检查是否点击在忽略的元素内部\n    const ignoreElements = ignoreRef.current\n      .map(item => getTargetElement(item))\n      .filter(Boolean) as Element[];\n\n    if (ignoreElements.some(element => element.contains(event.target as Node))) {\n      return;\n    }\n\n    handlerRef.current(event);\n  }, [detect]);\n\n  // 监听指定的事件\n  events.forEach(eventName => {\n    useEventListener(eventName, listener, document, { passive: true });\n  });\n}","import { useEffect, useCallback } from 'react'\nimport { useLocalStorage } from '../state/useLocalStorage'\n\nexport interface UseDarkOptions {\n  /**\n   * 存储键名\n   * @default 'reactuse-color-scheme'\n   */\n  storageKey?: string\n  \n  /**\n   * 默认值\n   * @default false\n   */\n  initialValue?: boolean\n  \n  /**\n   * 自定义存储对象\n   * @default localStorage\n   */\n  storage?: Storage\n  \n  /**\n   * 监听系统主题变化\n   * @default true\n   */\n  listenToSystemChanges?: boolean\n  \n  /**\n   * 目标元素选择器，用于添加 dark 类名\n   * @default 'html'\n   */\n  selector?: string\n  \n  /**\n   * 深色模式的类名\n   * @default 'dark'\n   */\n  darkClass?: string\n  \n  /**\n   * 浅色模式的类名\n   * @default ''\n   */\n  lightClass?: string\n  \n  /**\n   * 自定义值到类名的映射\n   */\n  valueDark?: string\n  \n  /**\n   * 自定义值到类名的映射\n   */\n  valueLight?: string\n}\n\n/**\n * 响应式深色模式管理\n * \n * @param options - 配置选项\n * @returns [isDark, setDark, toggle] - [是否深色模式, 设置深色模式, 切换模式]\n * \n * @example\n * ```tsx\n * function App() {\n *   const [isDark, setDark, toggle] = useDark()\n * \n *   return (\n *     <div>\n *       <p>当前模式: {isDark ? '深色' : '浅色'}</p>\n *       <button onClick={toggle}>切换主题</button>\n *       <button onClick={() => setDark(true)}>设为深色</button>\n *       <button onClick={() => setDark(false)}>设为浅色</button>\n *     </div>\n *   )\n * }\n * ```\n * \n * @example\n * ```tsx\n * // 自定义配置\n * function App() {\n *   const [isDark, setDark, toggle] = useDark({\n *     storageKey: 'my-theme',\n *     selector: 'body',\n *     darkClass: 'theme-dark',\n *     lightClass: 'theme-light'\n *   })\n * \n *   return (\n *     <div>\n *       <button onClick={toggle}>切换主题</button>\n *     </div>\n *   )\n * }\n * ```\n */\nexport function useDark(options: UseDarkOptions = {}) {\n  const {\n    storageKey = 'reactuse-color-scheme',\n    initialValue,\n    listenToSystemChanges = true,\n    selector = 'html',\n    darkClass = 'dark',\n    lightClass = '',\n    valueDark = 'dark',\n    valueLight = 'light'\n  } = options\n\n  // 获取系统主题偏好\n  const getSystemDark = useCallback(() => {\n    if (typeof window === 'undefined') return false\n    return window.matchMedia('(prefers-color-scheme: dark)').matches\n  }, [])\n\n  // 确定初始值\n  const getInitialValue = useCallback(() => {\n    if (initialValue !== undefined) return initialValue\n    return getSystemDark()\n  }, [initialValue, getSystemDark])\n\n  const [store, setStore] = useLocalStorage(\n    storageKey,\n    getInitialValue()\n  )\n\n  // 解析存储的值\n  const isDark = store === true || (typeof store === 'string' && store === valueDark)\n\n  // 更新 DOM 类名\n  const updateDOM = useCallback((dark: boolean) => {\n    if (typeof window === 'undefined') return\n    \n    const element = document.querySelector(selector)\n    if (!element) return\n\n    if (dark) {\n      if (lightClass) element.classList.remove(lightClass)\n      if (darkClass) element.classList.add(darkClass)\n    } else {\n      if (darkClass) element.classList.remove(darkClass)\n      if (lightClass) element.classList.add(lightClass)\n    }\n  }, [selector, darkClass, lightClass])\n\n  // 设置深色模式\n  const setDark = useCallback((value: boolean) => {\n    const newValue = value ? valueDark : valueLight\n    setStore(newValue as any)\n    updateDOM(value)\n  }, [setStore, updateDOM, valueDark, valueLight])\n\n  // 切换模式\n  const toggle = useCallback(() => {\n    setDark(!isDark)\n  }, [isDark, setDark])\n\n  // 监听系统主题变化\n  useEffect(() => {\n    if (!listenToSystemChanges || initialValue !== undefined || typeof window === 'undefined') {\n      return\n    }\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n    const handleChange = (event: MediaQueryListEvent) => {\n      setDark(event.matches)\n    }\n\n    mediaQuery.addEventListener('change', handleChange)\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange)\n    }\n  }, [listenToSystemChanges, initialValue, setDark])\n\n  // 初始化 DOM\n  useEffect(() => {\n    updateDOM(isDark)\n  }, [isDark, updateDOM])\n\n  return [isDark, setDark, toggle] as const\n}\n\n/**\n * 获取系统是否为深色模式\n * \n * @returns 系统是否为深色模式\n */\nexport function getSystemDark(): boolean {\n  if (typeof window === 'undefined') return false\n  return window.matchMedia('(prefers-color-scheme: dark)').matches\n}","import { useCallback, useEffect } from 'react'\nimport { useLocalStorage } from '../state/useLocalStorage'\nimport type { ColorMode } from '@reactuse/shared'\n\nexport interface UseColorModeOptions {\n  /**\n   * 存储键名\n   * @default 'reactuse-color-mode'\n   */\n  storageKey?: string\n  \n  /**\n   * 默认颜色模式\n   * @default 'auto'\n   */\n  initialValue?: ColorMode\n  \n  /**\n   * 目标元素选择器，用于添加类名\n   * @default 'html'\n   */\n  selector?: string\n  \n  /**\n   * 深色模式的类名\n   * @default 'dark'\n   */\n  darkClass?: string\n  \n  /**\n   * 浅色模式的类名\n   * @default 'light'\n   */\n  lightClass?: string\n  \n  /**\n   * 自动模式的类名\n   * @default 'auto'\n   */\n  autoClass?: string\n  \n  /**\n   * 自定义模式映射\n   */\n  modes?: Record<string, string>\n  \n  /**\n   * 监听系统主题变化\n   * @default true\n   */\n  listenToSystemChanges?: boolean\n  \n  /**\n   * 自定义属性名（用于 CSS 变量）\n   * @default 'data-color-mode'\n   */\n  attribute?: string\n  \n  /**\n   * 是否使用属性而不是类名\n   * @default false\n   */\n  useAttribute?: boolean\n}\n\n/**\n * 响应式颜色模式管理（支持 light/dark/auto）\n * \n * @param options - 配置选项\n * @returns [mode, setMode, systemMode] - [当前模式, 设置模式, 系统模式]\n * \n * @example\n * ```tsx\n * function App() {\n *   const [mode, setMode, systemMode] = useColorMode()\n * \n *   return (\n *     <div>\n *       <p>当前模式: {mode}</p>\n *       <p>系统模式: {systemMode}</p>\n *       <button onClick={() => setMode('light')}>浅色</button>\n *       <button onClick={() => setMode('dark')}>深色</button>\n *       <button onClick={() => setMode('auto')}>自动</button>\n *     </div>\n *   )\n * }\n * ```\n * \n * @example\n * ```tsx\n * // 自定义配置\n * function App() {\n *   const [mode, setMode] = useColorMode({\n *     storageKey: 'my-color-mode',\n *     selector: 'body',\n *     darkClass: 'theme-dark',\n *     lightClass: 'theme-light',\n *     useAttribute: true,\n *     attribute: 'data-theme'\n *   })\n * \n *   return (\n *     <div>\n *       <select value={mode} onChange={(e) => setMode(e.target.value as ColorMode)}>\n *         <option value=\"light\">浅色</option>\n *         <option value=\"dark\">深色</option>\n *         <option value=\"auto\">自动</option>\n *       </select>\n *     </div>\n *   )\n * }\n * ```\n */\nexport function useColorMode(options: UseColorModeOptions = {}) {\n  const {\n    storageKey = 'reactuse-color-mode',\n    initialValue = 'auto',\n    selector = 'html',\n    darkClass = 'dark',\n    lightClass = 'light',\n    autoClass = 'auto',\n    modes = {},\n    listenToSystemChanges = true,\n    attribute = 'data-color-mode',\n    useAttribute = false\n  } = options\n\n  // 获取系统主题偏好\n  const getSystemMode = useCallback((): 'light' | 'dark' => {\n    if (typeof window === 'undefined') return 'light'\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n  }, [])\n\n  const [mode, setStoredMode] = useLocalStorage<ColorMode>(\n    storageKey,\n    initialValue\n  )\n\n  const systemMode = getSystemMode()\n\n  // 计算实际应用的模式\n  const resolvedMode = mode === 'auto' ? systemMode : mode\n\n  // 更新 DOM\n  const updateDOM = useCallback((targetMode: 'light' | 'dark') => {\n    if (typeof window === 'undefined') return\n    \n    const element = document.querySelector(selector)\n    if (!element) return\n\n    if (useAttribute) {\n      // 使用属性\n      element.setAttribute(attribute, targetMode)\n    } else {\n      // 使用类名\n      const allClasses = [lightClass, darkClass, autoClass, ...Object.values(modes)]\n      element.classList.remove(...allClasses.filter(Boolean))\n      \n      const targetClass = targetMode === 'dark' ? darkClass : lightClass\n      if (targetClass) {\n        element.classList.add(targetClass)\n      }\n    }\n  }, [selector, useAttribute, attribute, lightClass, darkClass, autoClass, modes])\n\n  // 设置颜色模式\n  const setMode = useCallback((newMode: ColorMode) => {\n    setStoredMode(newMode)\n    const resolvedNewMode = newMode === 'auto' ? getSystemMode() : newMode\n    updateDOM(resolvedNewMode)\n  }, [setStoredMode, getSystemMode, updateDOM])\n\n  // 监听系统主题变化\n  useEffect(() => {\n    if (!listenToSystemChanges || typeof window === 'undefined') {\n      return\n    }\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n    const handleChange = () => {\n      if (mode === 'auto') {\n        const newSystemMode = getSystemMode()\n        updateDOM(newSystemMode)\n      }\n    }\n\n    mediaQuery.addEventListener('change', handleChange)\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange)\n    }\n  }, [mode, listenToSystemChanges, getSystemMode, updateDOM])\n\n  // 初始化 DOM\n  useEffect(() => {\n    updateDOM(resolvedMode)\n  }, [resolvedMode, updateDOM])\n\n  return [mode, setMode, systemMode] as const\n}\n\n/**\n * 获取系统颜色模式偏好\n * \n * @returns 系统颜色模式 ('light' | 'dark')\n */\nexport function getSystemColorMode(): 'light' | 'dark' {\n  if (typeof window === 'undefined') return 'light'\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n}\n\n/**\n * 切换颜色模式（在 light/dark 之间切换，忽略 auto）\n * \n * @param currentMode - 当前模式\n * @returns 切换后的模式\n */\nexport function toggleColorMode(currentMode: ColorMode): ColorMode {\n  if (currentMode === 'auto') {\n    return getSystemColorMode() === 'dark' ? 'light' : 'dark'\n  }\n  return currentMode === 'dark' ? 'light' : 'dark'\n}","import { useState, useCallback, useRef } from 'react'\n\nexport interface UseClipboardOptions {\n  /**\n   * 复制成功后的超时时间（毫秒）\n   * @default 1500\n   */\n  copiedDuring?: number\n  \n  /**\n   * 是否使用传统的 document.execCommand 方法作为回退\n   * @default true\n   */\n  legacy?: boolean\n  \n  /**\n   * 读取剪贴板内容的来源\n   * @default 'clipboard'\n   */\n  source?: 'clipboard' | 'selection'\n}\n\nexport interface UseClipboardReturn {\n  /**\n   * 当前剪贴板内容\n   */\n  text: string\n  \n  /**\n   * 是否支持剪贴板 API\n   */\n  isSupported: boolean\n  \n  /**\n   * 是否刚刚复制过（在 copiedDuring 时间内）\n   */\n  copied: boolean\n  \n  /**\n   * 复制文本到剪贴板\n   */\n  copy: (text: string) => Promise<void>\n  \n  /**\n   * 读取剪贴板内容\n   */\n  read: () => Promise<void>\n}\n\n/**\n * 响应式剪贴板 API\n * \n * @param options - 配置选项\n * @returns 剪贴板操作对象\n * \n * @example\n * ```tsx\n * function App() {\n *   const { text, copy, copied, isSupported } = useClipboard()\n *   const [input, setInput] = useState('')\n * \n *   if (!isSupported) {\n *     return <div>剪贴板 API 不支持</div>\n *   }\n * \n *   return (\n *     <div>\n *       <input \n *         value={input} \n *         onChange={(e) => setInput(e.target.value)}\n *         placeholder=\"输入要复制的文本\"\n *       />\n *       <button onClick={() => copy(input)}>\n *         {copied ? '已复制!' : '复制'}\n *       </button>\n *       <p>剪贴板内容: {text}</p>\n *     </div>\n *   )\n * }\n * ```\n * \n * @example\n * ```tsx\n * // 自定义配置\n * function App() {\n *   const { copy, copied } = useClipboard({\n *     copiedDuring: 3000, // 3秒\n *     legacy: false // 禁用传统方法\n *   })\n * \n *   return (\n *     <button onClick={() => copy('Hello World')}>\n *       {copied ? '复制成功!' : '复制文本'}\n *     </button>\n *   )\n * }\n * ```\n */\nexport function useClipboard(options: UseClipboardOptions = {}): UseClipboardReturn {\n  const {\n    copiedDuring = 1500,\n    legacy = true,\n    source = 'clipboard'\n  } = options\n\n  const [text, setText] = useState('')\n  const [copied, setCopied] = useState(false)\n  const timeoutRef = useRef<NodeJS.Timeout>()\n\n  // 检查是否支持剪贴板 API\n  const isSupported = typeof navigator !== 'undefined' && 'clipboard' in navigator\n\n  // 复制文本到剪贴板\n  const copy = useCallback(async (value: string) => {\n    if (!value) return\n\n    try {\n      // 优先使用现代剪贴板 API\n      if (isSupported) {\n        await navigator.clipboard.writeText(value)\n      } else if (legacy) {\n        // 回退到传统方法\n        await copyTextLegacy(value)\n      } else {\n        throw new Error('Clipboard API not supported and legacy method disabled')\n      }\n\n      setText(value)\n      setCopied(true)\n\n      // 清除之前的定时器\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n\n      // 设置新的定时器\n      timeoutRef.current = setTimeout(() => {\n        setCopied(false)\n      }, copiedDuring)\n    } catch (error) {\n      console.error('Failed to copy text to clipboard:', error)\n      throw error\n    }\n  }, [isSupported, legacy, copiedDuring])\n\n  // 读取剪贴板内容\n  const read = useCallback(async () => {\n    if (!isSupported) {\n      console.warn('Clipboard API not supported')\n      return\n    }\n\n    try {\n      let clipboardText = ''\n      \n      if (source === 'clipboard') {\n        clipboardText = await navigator.clipboard.readText()\n      } else if (source === 'selection') {\n        // 读取选中的文本\n        const selection = window.getSelection()\n        clipboardText = selection ? selection.toString() : ''\n      }\n      \n      setText(clipboardText)\n    } catch (error) {\n      console.error('Failed to read clipboard:', error)\n      throw error\n    }\n  }, [isSupported, source])\n\n  return {\n    text,\n    isSupported,\n    copied,\n    copy,\n    read\n  }\n}\n\n/**\n * 传统的复制方法（使用 document.execCommand）\n */\nfunction copyTextLegacy(text: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const textarea = document.createElement('textarea')\n    textarea.value = text\n    textarea.style.position = 'fixed'\n    textarea.style.left = '-999999px'\n    textarea.style.top = '-999999px'\n    document.body.appendChild(textarea)\n    \n    try {\n      textarea.focus()\n      textarea.select()\n      \n      const successful = document.execCommand('copy')\n      if (successful) {\n        resolve()\n      } else {\n        reject(new Error('execCommand copy failed'))\n      }\n    } catch (error) {\n      reject(error)\n    } finally {\n      document.body.removeChild(textarea)\n    }\n  })\n}\n\n/**\n * 检查是否支持剪贴板 API\n * \n * @returns 是否支持剪贴板 API\n */\nexport function isClipboardSupported(): boolean {\n  return typeof navigator !== 'undefined' && 'clipboard' in navigator\n}\n\n/**\n * 检查是否支持剪贴板读取\n * \n * @returns 是否支持剪贴板读取\n */\nexport function isClipboardReadSupported(): boolean {\n  return isClipboardSupported() && 'readText' in navigator.clipboard\n}\n\n/**\n * 检查是否支持剪贴板写入\n * \n * @returns 是否支持剪贴板写入\n */\nexport function isClipboardWriteSupported(): boolean {\n  return isClipboardSupported() && 'writeText' in navigator.clipboard\n}","import { useState, useEffect, useCallback, useRef } from 'react'\n\nexport interface UseFetchOptions {\n  /**\n   * 请求方法\n   * @default 'GET'\n   */\n  method?: string\n  \n  /**\n   * 请求头\n   */\n  headers?: HeadersInit\n  \n  /**\n   * 请求体\n   */\n  body?: BodyInit | null\n  \n  /**\n   * 请求模式\n   */\n  mode?: RequestMode\n  \n  /**\n   * 凭据模式\n   */\n  credentials?: RequestCredentials\n  \n  /**\n   * 缓存模式\n   */\n  cache?: RequestCache\n  \n  /**\n   * 重定向模式\n   */\n  redirect?: RequestRedirect\n  \n  /**\n   * 引用策略\n   */\n  referrer?: string\n  \n  /**\n   * 引用策略\n   */\n  referrerPolicy?: ReferrerPolicy\n  \n  /**\n   * 完整性\n   */\n  integrity?: string\n  \n  /**\n   * 保持活动\n   */\n  keepalive?: boolean\n  \n  /**\n   * 信号\n   */\n  signal?: AbortSignal\n  \n  /**\n   * 超时时间（毫秒）\n   */\n  timeout?: number\n  \n  /**\n   * 是否立即执行\n   * @default true\n   */\n  immediate?: boolean\n  \n  /**\n   * 重试次数\n   * @default 0\n   */\n  retries?: number\n  \n  /**\n   * 重试延迟（毫秒）\n   * @default 1000\n   */\n  retryDelay?: number\n  \n  /**\n   * 响应拦截器\n   */\n  beforeFetch?: (ctx: BeforeFetchContext) => Promise<Partial<BeforeFetchContext> | void> | Partial<BeforeFetchContext> | void\n  \n  /**\n   * 响应后处理\n   */\n  afterFetch?: (ctx: AfterFetchContext) => Promise<Partial<AfterFetchContext> | void> | Partial<AfterFetchContext> | void\n  \n  /**\n   * 错误处理\n   */\n  onFetchError?: (ctx: OnFetchErrorContext) => Promise<Partial<OnFetchErrorContext> | void> | Partial<OnFetchErrorContext> | void\n}\n\nexport interface BeforeFetchContext {\n  url: string\n  options: RequestInit\n  cancel: () => void\n}\n\nexport interface AfterFetchContext {\n  response: Response\n  data: any\n}\n\nexport interface OnFetchErrorContext {\n  error: any\n  data: any\n}\n\nexport interface UseFetchReturn<T> {\n  /**\n   * 响应数据\n   */\n  data: T | null\n  \n  /**\n   * 错误信息\n   */\n  error: Error | null\n  \n  /**\n   * 是否正在加载\n   */\n  isLoading: boolean\n  \n  /**\n   * 是否已完成（成功或失败）\n   */\n  isFinished: boolean\n  \n  /**\n   * 是否可以中止\n   */\n  canAbort: boolean\n  \n  /**\n   * 是否已中止\n   */\n  aborted: boolean\n  \n  /**\n   * HTTP 状态码\n   */\n  statusCode: number | null\n  \n  /**\n   * 响应对象\n   */\n  response: Response | null\n  \n  /**\n   * 执行请求\n   */\n  execute: (throwOnFailed?: boolean) => Promise<any>\n  \n  /**\n   * 中止请求\n   */\n  abort: () => void\n  \n  /**\n   * 获取 JSON 数据\n   */\n  json: <JSON = any>() => Promise<JSON>\n  \n  /**\n   * 获取文本数据\n   */\n  text: () => Promise<string>\n  \n  /**\n   * 获取 Blob 数据\n   */\n  blob: () => Promise<Blob>\n  \n  /**\n   * 获取 ArrayBuffer 数据\n   */\n  arrayBuffer: () => Promise<ArrayBuffer>\n  \n  /**\n   * 获取 FormData 数据\n   */\n  formData: () => Promise<FormData>\n}\n\n/**\n * 响应式 Fetch API\n * \n * @param url - 请求 URL\n * @param options - 配置选项\n * @returns Fetch 操作对象\n * \n * @example\n * ```tsx\n * function UserProfile({ userId }: { userId: string }) {\n *   const { data, error, isLoading, execute } = useFetch<User>(\n *     `https://api.example.com/users/${userId}`\n *   )\n * \n *   if (isLoading) return <div>加载中...</div>\n *   if (error) return <div>错误: {error.message}</div>\n *   if (!data) return <div>无数据</div>\n * \n *   return (\n *     <div>\n *       <h1>{data.name}</h1>\n *       <p>{data.email}</p>\n *       <button onClick={() => execute()}>刷新</button>\n *     </div>\n *   )\n * }\n * ```\n * \n * @example\n * ```tsx\n * // POST 请求\n * function CreateUser() {\n *   const { data, error, isLoading, execute } = useFetch<User>(\n *     'https://api.example.com/users',\n *     {\n *       method: 'POST',\n *       headers: { 'Content-Type': 'application/json' },\n *       immediate: false\n *     }\n *   )\n * \n *   const handleSubmit = async (userData: Partial<User>) => {\n *     await execute({\n *       body: JSON.stringify(userData)\n *     })\n *   }\n * \n *   return (\n *     <form onSubmit={(e) => {\n *       e.preventDefault()\n *       handleSubmit({ name: 'John', email: 'john@example.com' })\n *     }}>\n *       <button type=\"submit\" disabled={isLoading}>\n *         {isLoading ? '创建中...' : '创建用户'}\n *       </button>\n *     </form>\n *   )\n * }\n * ```\n */\nexport function useFetch<T = any>(\n  url: string,\n  options: UseFetchOptions = {}\n): UseFetchReturn<T> {\n  const {\n    method = 'GET',\n    headers,\n    body,\n    mode,\n    credentials,\n    cache,\n    redirect,\n    referrer,\n    referrerPolicy,\n    integrity,\n    keepalive,\n    signal,\n    timeout,\n    immediate = true,\n    retries = 0,\n    retryDelay = 1000,\n    beforeFetch,\n    afterFetch,\n    onFetchError\n  } = options\n\n  const [data, setData] = useState<T | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isFinished, setIsFinished] = useState(false)\n  const [aborted, setAborted] = useState(false)\n  const [statusCode, setStatusCode] = useState<number | null>(null)\n  const [response, setResponse] = useState<Response | null>(null)\n\n  const abortControllerRef = useRef<AbortController | null>(null)\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  const canAbort = abortControllerRef.current !== null\n\n  // 中止请求\n  const abort = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort()\n      abortControllerRef.current = null\n      setAborted(true)\n    }\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n  }, [])\n\n  // 执行请求\n  const execute = useCallback(async (throwOnFailed = false, overrideOptions: Partial<UseFetchOptions> = {}) => {\n    const mergedOptions = { ...options, ...overrideOptions }\n    let currentUrl = url\n    let requestOptions: RequestInit = {\n      method: mergedOptions.method || method\n    }\n    \n    // 只添加非 undefined 的属性\n    const finalHeaders = mergedOptions.headers || headers\n    if (finalHeaders) {\n      requestOptions.headers = finalHeaders\n    }\n    \n    const finalBody = mergedOptions.body !== undefined ? mergedOptions.body : body\n    if (finalBody !== undefined) {\n      requestOptions.body = finalBody\n    }\n    \n    const finalMode = mergedOptions.mode || mode\n    if (finalMode) {\n      requestOptions.mode = finalMode\n    }\n    \n    const finalCredentials = mergedOptions.credentials || credentials\n    if (finalCredentials) {\n      requestOptions.credentials = finalCredentials\n    }\n    \n    const finalCache = mergedOptions.cache || cache\n    if (finalCache) {\n      requestOptions.cache = finalCache\n    }\n    \n    const finalRedirect = mergedOptions.redirect || redirect\n    if (finalRedirect) {\n      requestOptions.redirect = finalRedirect\n    }\n    \n    const finalReferrer = mergedOptions.referrer || referrer\n    if (finalReferrer) {\n      requestOptions.referrer = finalReferrer\n    }\n    \n    const finalReferrerPolicy = mergedOptions.referrerPolicy || referrerPolicy\n    if (finalReferrerPolicy) {\n      requestOptions.referrerPolicy = finalReferrerPolicy\n    }\n    \n    const finalIntegrity = mergedOptions.integrity || integrity\n    if (finalIntegrity) {\n      requestOptions.integrity = finalIntegrity\n    }\n    \n    const finalKeepalive = mergedOptions.keepalive !== undefined ? mergedOptions.keepalive : keepalive\n    if (finalKeepalive !== undefined) {\n      requestOptions.keepalive = finalKeepalive\n    }\n\n    // 创建 AbortController\n    abortControllerRef.current = new AbortController()\n    requestOptions.signal = signal || abortControllerRef.current.signal\n\n    setIsLoading(true)\n    setIsFinished(false)\n    setError(null)\n    setAborted(false)\n\n    // 设置超时\n    if (timeout) {\n      timeoutRef.current = setTimeout(() => {\n        abort()\n      }, timeout)\n    }\n\n    try {\n      // beforeFetch 拦截器\n      if (beforeFetch) {\n        const ctx: BeforeFetchContext = {\n          url: currentUrl,\n          options: requestOptions,\n          cancel: abort\n        }\n        const result = await beforeFetch(ctx)\n        if (result) {\n          currentUrl = result.url || currentUrl\n          requestOptions = { ...requestOptions, ...result.options }\n        }\n      }\n\n      let currentRetries = 0\n      let lastError: Error\n\n      while (currentRetries <= retries) {\n        try {\n          const fetchResponse = await fetch(currentUrl, requestOptions)\n          setResponse(fetchResponse)\n          setStatusCode(fetchResponse.status)\n\n          if (!fetchResponse.ok) {\n            throw new Error(`HTTP Error: ${fetchResponse.status} ${fetchResponse.statusText}`)\n          }\n\n          let responseData: any\n          const contentType = fetchResponse.headers.get('content-type')\n          \n          if (contentType?.includes('application/json')) {\n            responseData = await fetchResponse.json()\n          } else if (contentType?.includes('text/')) {\n            responseData = await fetchResponse.text()\n          } else {\n            responseData = await fetchResponse.blob()\n          }\n\n          // afterFetch 拦截器\n          if (afterFetch) {\n            const ctx: AfterFetchContext = {\n              response: fetchResponse,\n              data: responseData\n            }\n            const result = await afterFetch(ctx)\n            if (result?.data !== undefined) {\n              responseData = result.data\n            }\n          }\n\n          setData(responseData)\n          setIsLoading(false)\n          setIsFinished(true)\n\n          if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current)\n            timeoutRef.current = null\n          }\n\n          return responseData\n        } catch (err) {\n          lastError = err as Error\n          currentRetries++\n          \n          if (currentRetries <= retries) {\n            await new Promise(resolve => setTimeout(resolve, retryDelay))\n          }\n        }\n      }\n\n      throw lastError!\n    } catch (err) {\n      const fetchError = err as Error\n      \n      // onFetchError 拦截器\n      if (onFetchError) {\n        const ctx: OnFetchErrorContext = {\n          error: fetchError,\n          data: null\n        }\n        await onFetchError(ctx)\n      }\n\n      setError(fetchError)\n      setIsLoading(false)\n      setIsFinished(true)\n\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n        timeoutRef.current = null\n      }\n\n      if (throwOnFailed) {\n        throw fetchError\n      }\n    }\n  }, [url, options, method, headers, body, mode, credentials, cache, redirect, referrer, referrerPolicy, integrity, keepalive, signal, timeout, retries, retryDelay, beforeFetch, afterFetch, onFetchError, abort])\n\n  // 数据解析方法\n  const json = useCallback(async <JSON = any>(): Promise<JSON> => {\n    if (!response) throw new Error('No response available')\n    return response.json()\n  }, [response])\n\n  const text = useCallback(async (): Promise<string> => {\n    if (!response) throw new Error('No response available')\n    return response.text()\n  }, [response])\n\n  const blob = useCallback(async (): Promise<Blob> => {\n    if (!response) throw new Error('No response available')\n    return response.blob()\n  }, [response])\n\n  const arrayBuffer = useCallback(async (): Promise<ArrayBuffer> => {\n    if (!response) throw new Error('No response available')\n    return response.arrayBuffer()\n  }, [response])\n\n  const formData = useCallback(async (): Promise<FormData> => {\n    if (!response) throw new Error('No response available')\n    return response.formData()\n  }, [response])\n\n  // 立即执行\n  useEffect(() => {\n    if (immediate) {\n      execute()\n    }\n  }, [immediate, execute])\n\n  // 清理\n  useEffect(() => {\n    return () => {\n      abort()\n    }\n  }, [])\n\n  return {\n    data,\n    error,\n    isLoading,\n    isFinished,\n    canAbort,\n    aborted,\n    statusCode,\n    response,\n    execute,\n    abort,\n    json,\n    text,\n    blob,\n    arrayBuffer,\n    formData\n  }\n}\n\n/**\n * 创建 useFetch 的实例，带有预设配置\n * \n * @param baseUrl - 基础 URL\n * @param options - 默认配置选项\n * @returns 配置好的 useFetch 函数\n */\nexport function createFetch(\n  baseUrl: string = '',\n  options: UseFetchOptions = {}\n) {\n  return function <T = any>(url: string, fetchOptions: UseFetchOptions = {}) {\n    const fullUrl = url.startsWith('http') ? url : `${baseUrl}${url}`\n    const mergedOptions = { ...options, ...fetchOptions }\n    return useFetch<T>(fullUrl, mergedOptions)\n  }\n}","import { useEffect, useRef, useCallback } from 'react';\n\nexport interface UseIntervalOptions {\n  /** 是否立即开始，默认为 true */\n  immediate?: boolean;\n  /** 是否在组件卸载时自动清理，默认为 true */\n  immediateCallback?: boolean;\n}\n\nexport interface UseIntervalReturn {\n  /** 是否正在运行 */\n  isActive: boolean;\n  /** 暂停定时器 */\n  pause: () => void;\n  /** 恢复定时器 */\n  resume: () => void;\n  /** 重新开始定时器 */\n  restart: () => void;\n}\n\n/**\n * 响应式定时器 hook\n * \n * @param callback - 定时执行的回调函数\n * @param interval - 间隔时间（毫秒），null 表示暂停\n * @param options - 配置选项\n * @returns 定时器控制对象\n */\nexport function useInterval(\n  callback: () => void,\n  interval: number | null = 1000,\n  options: UseIntervalOptions = {}\n): UseIntervalReturn {\n  const { immediate = true, immediateCallback = false } = options;\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const callbackRef = useRef(callback);\n  const isActiveRef = useRef(false);\n\n  // 更新回调函数引用\n  callbackRef.current = callback;\n\n  const clear = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    isActiveRef.current = false;\n  }, []);\n\n  const start = useCallback(() => {\n    if (interval === null || interval <= 0) return;\n    \n    clear();\n    \n    if (immediateCallback) {\n      callbackRef.current();\n    }\n    \n    intervalRef.current = setInterval(() => {\n      callbackRef.current();\n    }, interval);\n    \n    isActiveRef.current = true;\n  }, [interval, immediateCallback, clear]);\n\n  const pause = useCallback(() => {\n    clear();\n  }, [clear]);\n\n  const resume = useCallback(() => {\n    if (interval !== null) {\n      start();\n    }\n  }, [interval, start]);\n\n  const restart = useCallback(() => {\n    start();\n  }, [start]);\n\n  // 当 interval 变化时重新启动定时器\n  useEffect(() => {\n    if (immediate && interval !== null) {\n      start();\n    }\n    return clear;\n  }, [interval, immediate, start, clear]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return clear;\n  }, [clear]);\n\n  return {\n    isActive: isActiveRef.current,\n    pause,\n    resume,\n    restart\n  };\n}\n\n/**\n * 简化版本的 useInterval，只接受回调和间隔时间\n * \n * @param callback - 定时执行的回调函数\n * @param interval - 间隔时间（毫秒），null 表示暂停\n */\nexport function useIntervalFn(\n  callback: () => void,\n  interval: number | null = 1000\n): UseIntervalReturn {\n  return useInterval(callback, interval);\n}","import { useState, useEffect, useRef, useCallback } from 'react';\n\nexport interface UseTimeoutOptions {\n  /** 是否立即开始，默认为 true */\n  immediate?: boolean;\n  /** 是否在组件卸载时自动清理，默认为 true */\n  immediateCallback?: boolean;\n}\n\nexport interface UseTimeoutReturn {\n  /** 是否准备就绪（超时已触发） */\n  ready: boolean;\n  /** 是否正在运行 */\n  isPending: boolean;\n  /** 开始或重新开始定时器 */\n  start: () => void;\n  /** 停止定时器 */\n  stop: () => void;\n  /** 重新开始定时器 */\n  restart: () => void;\n}\n\n/**\n * 响应式超时定时器 hook\n * \n * @param callback - 超时后执行的回调函数\n * @param delay - 延迟时间（毫秒），null 表示不启动\n * @param options - 配置选项\n * @returns 定时器控制对象\n */\nexport function useTimeout(\n  callback: () => void,\n  delay: number | null = 1000,\n  options: UseTimeoutOptions = {}\n): UseTimeoutReturn {\n  const { immediate = true, immediateCallback = false } = options;\n  \n  const [ready, setReady] = useState(false);\n  const [isPending, setIsPending] = useState(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const callbackRef = useRef(callback);\n\n  // 更新回调函数引用\n  callbackRef.current = callback;\n\n  const clear = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n    setIsPending(false);\n  }, []);\n\n  const start = useCallback(() => {\n    if (delay === null || delay < 0) return;\n    \n    clear();\n    setReady(false);\n    setIsPending(true);\n    \n    if (immediateCallback) {\n      callbackRef.current();\n      setReady(true);\n      setIsPending(false);\n      return;\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      callbackRef.current();\n      setReady(true);\n      setIsPending(false);\n      timeoutRef.current = null;\n    }, delay);\n  }, [delay, immediateCallback, clear]);\n\n  const stop = useCallback(() => {\n    clear();\n    setReady(false);\n  }, [clear]);\n\n  const restart = useCallback(() => {\n    stop();\n    start();\n  }, [start, stop]);\n\n  // 当 delay 变化时重新启动定时器\n  useEffect(() => {\n    if (immediate && delay !== null) {\n      start();\n    }\n    return clear;\n  }, [delay, immediate, start, clear]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return clear;\n  }, [clear]);\n\n  return {\n    ready,\n    isPending,\n    start,\n    stop,\n    restart\n  };\n}\n\n/**\n * 简化版本的 useTimeout，只接受回调和延迟时间\n * \n * @param callback - 超时后执行的回调函数\n * @param delay - 延迟时间（毫秒），null 表示不启动\n */\nexport function useTimeoutFn(\n  callback: () => void,\n  delay: number | null = 1000\n): UseTimeoutReturn {\n  return useTimeout(callback, delay);\n}","import { useState, useRef } from 'react';\nimport { useInterval } from './useInterval';\n\nexport interface UseNowOptions {\n  /** 更新间隔（毫秒），默认为 1000 */\n  interval?: number;\n  /** 是否立即开始更新，默认为 true */\n  immediate?: boolean;\n  /** 自定义时间获取函数，默认为 () => new Date() */\n  now?: () => Date;\n}\n\n/**\n * 响应式当前时间 hook\n * \n * @param options - 配置选项\n * @returns 当前时间的 Date 对象\n */\nexport function useNow(options: UseNowOptions = {}): Date {\n  const {\n    interval = 1000,\n    immediate = true,\n    now = () => new Date()\n  } = options;\n  \n  const [currentTime, setCurrentTime] = useState<Date>(now);\n  const nowRef = useRef(now);\n  \n  // 更新时间获取函数引用\n  nowRef.current = now;\n  \n  const updateTime = () => {\n    setCurrentTime(nowRef.current());\n  };\n  \n  // 使用 useInterval 定期更新时间\n  useInterval(updateTime, interval, { immediate });\n  \n  return currentTime;\n}\n\n/**\n * 响应式当前时间戳 hook\n * \n * @param options - 配置选项\n * @returns 当前时间戳（毫秒）\n */\nexport function useTimestamp(options: UseNowOptions = {}): number {\n  const {\n    interval = 1000,\n    immediate = true,\n    now = () => new Date()\n  } = options;\n  \n  const [timestamp, setTimestamp] = useState<number>(now().getTime());\n  const nowRef = useRef(now);\n  \n  // 更新时间获取函数引用\n  nowRef.current = now;\n  \n  const updateTimestamp = () => {\n    setTimestamp(nowRef.current().getTime());\n  };\n  \n  // 使用 useInterval 定期更新时间戳\n  useInterval(updateTimestamp, interval, { immediate });\n  \n  return timestamp;\n}\n\n/**\n * 高精度时间戳 hook（使用 performance.now()）\n * \n * @param options - 配置选项\n * @returns 高精度时间戳\n */\nexport function usePerformanceNow(options: Omit<UseNowOptions, 'now'> = {}): number {\n  const {\n    interval = 16, // 默认 60fps\n    immediate = true\n  } = options;\n  \n  const [performanceTime, setPerformanceTime] = useState<number>(\n    typeof performance !== 'undefined' ? performance.now() : Date.now()\n  );\n  \n  const updatePerformanceTime = () => {\n    setPerformanceTime(\n      typeof performance !== 'undefined' ? performance.now() : Date.now()\n    );\n  };\n  \n  // 使用 useInterval 定期更新高精度时间戳\n  useInterval(updatePerformanceTime, interval, { immediate });\n  \n  return performanceTime;\n}","import { useState, useEffect, useRef } from 'react';\n\nexport interface UseDebounceOptions {\n  /** 延迟时间（毫秒），默认为 300 */\n  delay?: number;\n  /** 是否在首次调用时立即执行，默认为 false */\n  leading?: boolean;\n  /** 是否在延迟结束后执行，默认为 true */\n  trailing?: boolean;\n  /** 最大等待时间（毫秒），超过此时间强制执行 */\n  maxWait?: number;\n}\n\n/**\n * 防抖 hook，延迟执行函数直到停止调用一段时间后\n * \n * @param value - 需要防抖的值\n * @param delay - 延迟时间（毫秒），默认为 300\n * @returns 防抖后的值\n */\nexport function useDebounce<T>(value: T, delay: number = 300): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n/**\n * 防抖函数 hook，返回一个防抖后的函数\n * \n * @param fn - 需要防抖的函数\n * @param options - 防抖选项\n * @returns 防抖后的函数和取消函数\n */\nexport function useDebounceFn<T extends (...args: any[]) => any>(\n  fn: T,\n  options: UseDebounceOptions = {}\n): {\n  /** 防抖后的函数 */\n  run: T;\n  /** 取消防抖 */\n  cancel: () => void;\n  /** 立即执行 */\n  flush: () => void;\n} {\n  const {\n    delay = 300,\n    leading = false,\n    trailing = true,\n    maxWait\n  } = options;\n\n  const fnRef = useRef(fn);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const maxTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const lastCallTimeRef = useRef<number>(0);\n  const lastInvokeTimeRef = useRef<number>(0);\n  const argsRef = useRef<Parameters<T>>();\n  const resultRef = useRef<ReturnType<T>>();\n\n  // 更新函数引用\n  fnRef.current = fn;\n\n  const invokeFunc = (time: number) => {\n    const args = argsRef.current!;\n    argsRef.current = undefined;\n    lastInvokeTimeRef.current = time;\n    resultRef.current = fnRef.current(...args);\n    return resultRef.current;\n  };\n\n  const leadingEdge = (time: number) => {\n    lastInvokeTimeRef.current = time;\n    timerRef.current = setTimeout(timerExpired, delay);\n    return leading ? invokeFunc(time) : resultRef.current;\n  };\n\n  const remainingWait = (time: number) => {\n    const timeSinceLastCall = time - lastCallTimeRef.current;\n    const timeSinceLastInvoke = time - lastInvokeTimeRef.current;\n    const timeWaiting = delay - timeSinceLastCall;\n\n    return maxWait !== undefined\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  };\n\n  const shouldInvoke = (time: number) => {\n    const timeSinceLastCall = time - lastCallTimeRef.current;\n    const timeSinceLastInvoke = time - lastInvokeTimeRef.current;\n\n    return (\n      lastCallTimeRef.current === 0 ||\n      timeSinceLastCall >= delay ||\n      timeSinceLastCall < 0 ||\n      (maxWait !== undefined && timeSinceLastInvoke >= maxWait)\n    );\n  };\n\n  const timerExpired = () => {\n    const time = Date.now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    timerRef.current = setTimeout(timerExpired, remainingWait(time));\n    return resultRef.current;\n  };\n\n  const trailingEdge = (time: number) => {\n    timerRef.current = null;\n\n    if (trailing && argsRef.current) {\n      return invokeFunc(time);\n    }\n    argsRef.current = undefined;\n    return resultRef.current;\n  };\n\n  const cancel = () => {\n    if (timerRef.current !== null) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n    if (maxTimerRef.current !== null) {\n      clearTimeout(maxTimerRef.current);\n      maxTimerRef.current = null;\n    }\n    lastInvokeTimeRef.current = 0;\n    lastCallTimeRef.current = 0;\n    argsRef.current = undefined;\n  };\n\n  const flush = () => {\n    return timerRef.current === null ? resultRef.current : trailingEdge(Date.now());\n  };\n\n  const debounced = ((...args: Parameters<T>) => {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastCallTimeRef.current = time;\n    argsRef.current = args;\n\n    if (isInvoking) {\n      if (timerRef.current === null) {\n        return leadingEdge(lastCallTimeRef.current);\n      }\n      if (maxWait !== undefined) {\n        timerRef.current = setTimeout(timerExpired, delay);\n        return invokeFunc(lastCallTimeRef.current);\n      }\n    }\n    if (timerRef.current === null) {\n      timerRef.current = setTimeout(timerExpired, delay);\n    }\n    return resultRef.current;\n  }) as T;\n\n  // 清理副作用\n  useEffect(() => {\n    return () => {\n      cancel();\n    };\n  }, []);\n\n  return {\n    run: debounced,\n    cancel,\n    flush\n  };\n}","import { useState, useEffect, useRef } from 'react';\n\nexport interface UseThrottleOptions {\n  /** 节流间隔时间（毫秒），默认为 300 */\n  delay?: number;\n  /** 是否在首次调用时立即执行，默认为 true */\n  leading?: boolean;\n  /** 是否在节流结束后执行最后一次调用，默认为 true */\n  trailing?: boolean;\n}\n\n/**\n * 节流 hook，限制值更新的频率\n * \n * @param value - 需要节流的值\n * @param delay - 节流间隔时间（毫秒），默认为 300\n * @returns 节流后的值\n */\nexport function useThrottle<T>(value: T, delay: number = 300): T {\n  const [throttledValue, setThrottledValue] = useState<T>(value);\n  const lastExecuted = useRef<number>(0);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    const now = Date.now();\n    const timeSinceLastExecution = now - lastExecuted.current;\n\n    if (timeSinceLastExecution >= delay) {\n      // 如果距离上次执行已经超过延迟时间，立即更新\n      setThrottledValue(value);\n      lastExecuted.current = now;\n    } else {\n      // 否则设置定时器在剩余时间后更新\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      \n      timeoutRef.current = setTimeout(() => {\n        setThrottledValue(value);\n        lastExecuted.current = Date.now();\n      }, delay - timeSinceLastExecution);\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [value, delay]);\n\n  return throttledValue;\n}\n\n/**\n * 节流函数 hook，返回一个节流后的函数\n * \n * @param fn - 需要节流的函数\n * @param options - 节流选项\n * @returns 节流后的函数和取消函数\n */\nexport function useThrottleFn<T extends (...args: any[]) => any>(\n  fn: T,\n  options: UseThrottleOptions = {}\n): {\n  /** 节流后的函数 */\n  run: T;\n  /** 取消节流 */\n  cancel: () => void;\n  /** 立即执行 */\n  flush: () => void;\n} {\n  const {\n    delay = 300,\n    leading = true,\n    trailing = true\n  } = options;\n\n  const fnRef = useRef(fn);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const lastCallTimeRef = useRef<number>(0);\n  const lastInvokeTimeRef = useRef<number>(0);\n  const argsRef = useRef<Parameters<T>>();\n  const resultRef = useRef<ReturnType<T>>();\n\n  // 更新函数引用\n  fnRef.current = fn;\n\n  const invokeFunc = (time: number) => {\n    const args = argsRef.current!;\n    argsRef.current = undefined;\n    lastInvokeTimeRef.current = time;\n    resultRef.current = fnRef.current(...args);\n    return resultRef.current;\n  };\n\n  const leadingEdge = (time: number) => {\n    lastInvokeTimeRef.current = time;\n    timerRef.current = setTimeout(timerExpired, delay);\n    return leading ? invokeFunc(time) : resultRef.current;\n  };\n\n  const remainingWait = (time: number) => {\n    const timeSinceLastInvoke = time - lastInvokeTimeRef.current;\n    const timeWaiting = delay - timeSinceLastInvoke;\n    \n    return timeWaiting;\n  };\n\n  const shouldInvoke = (time: number) => {\n    const timeSinceLastCall = time - lastCallTimeRef.current;\n    const timeSinceLastInvoke = time - lastInvokeTimeRef.current;\n\n    return (\n      lastCallTimeRef.current === 0 ||\n      timeSinceLastInvoke >= delay ||\n      timeSinceLastCall < 0\n    );\n  };\n\n  const timerExpired = () => {\n    const time = Date.now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    timerRef.current = setTimeout(timerExpired, remainingWait(time));\n    return resultRef.current;\n  };\n\n  const trailingEdge = (time: number) => {\n    timerRef.current = null;\n\n    if (trailing && argsRef.current) {\n      return invokeFunc(time);\n    }\n    argsRef.current = undefined;\n    return resultRef.current;\n  };\n\n  const cancel = () => {\n    if (timerRef.current !== null) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n    lastInvokeTimeRef.current = 0;\n    lastCallTimeRef.current = 0;\n    argsRef.current = undefined;\n  };\n\n  const flush = () => {\n    return timerRef.current === null ? resultRef.current : trailingEdge(Date.now());\n  };\n\n  const throttled = ((...args: Parameters<T>) => {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastCallTimeRef.current = time;\n    argsRef.current = args;\n\n    if (isInvoking) {\n      if (timerRef.current === null) {\n        return leadingEdge(lastCallTimeRef.current);\n      }\n    }\n    if (timerRef.current === null) {\n      timerRef.current = setTimeout(timerExpired, delay);\n    }\n    return resultRef.current;\n  }) as T;\n\n  // 清理副作用\n  useEffect(() => {\n    return () => {\n      cancel();\n    };\n  }, []);\n\n  return {\n    run: throttled,\n    cancel,\n    flush\n  };\n}"]}